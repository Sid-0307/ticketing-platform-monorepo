services:
  postgres:
    image: postgres:16-alpine
    container_name: ticketing-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ticketing-network

  redis:
    image: redis:7-alpine
    container_name: ticketing-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ticketing-network

  db-setup:
    build:
      context: .
      dockerfile: packages/database/Dockerfile
    container_name: ticketing-db-setup
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ticketing-network
    restart: "no"

  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    container_name: ticketing-api
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: ${API_PORT}
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://redis:6379
    ports:
      - "${API_PORT}:${API_PORT}"
    depends_on:
      db-setup:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ticketing-network
    restart: unless-stopped

  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
    container_name: ticketing-web
    environment:
      NODE_ENV: ${NODE_ENV}
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      PORT: ${WEB_PORT}
    ports:
      - "${WEB_PORT}:${WEB_PORT}"
    depends_on:
      - api
    networks:
      - ticketing-network
    restart: unless-stopped

networks:
  ticketing-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
